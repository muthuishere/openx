# Continuous Integration workflow for OpenX
# This workflow builds, tests, and validates openx across different platforms
# Runs on every push to main and on pull requests
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests

name: 🔄 CI Pipeline

on:
  push:
    branches: ['main', 'develop']
    tags: ['v*']
  pull_request:
    branches: ['main', 'develop']
  workflow_dispatch:  # Allow manual triggering

# Prevent multiple CI runs for the same ref
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GO_VERSION: '1.21'  # Define Go version centrally

jobs:
  # Lint and format checking
  lint:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐹 Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: 📝 Check code formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "❌ Code is not formatted correctly:"
            gofmt -s -l .
            echo "Run 'go fmt ./...' to fix formatting issues"
            exit 1
          fi
          echo "✅ Code formatting is correct"

      - name: 🔍 Run go vet
        run: |
          go vet ./...
          echo "✅ go vet passed"

      - name: 🧪 Run staticcheck (if available)
        run: |
          if command -v staticcheck >/dev/null 2>&1; then
            staticcheck ./...
            echo "✅ staticcheck passed"
          else
            echo "ℹ️ staticcheck not available, skipping"
          fi
        continue-on-error: true

  # Build and test across platforms
  build:
    name: 🏗️ Build & Test
    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ['1.21', '1.22']
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐹 Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: 📦 Download dependencies
        run: go mod download

      - name: 🔧 Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Build application
        run: task build:all

      - name: 🧪 Run tests
        run: task test:all

      - name: 📊 Generate test coverage (Ubuntu only)
        if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.21'
        run: |
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: 📤 Upload coverage reports
        if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.21'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.html

  # Test GoReleaser configuration
  goreleaser-check:
    name: 🚀 GoReleaser Check
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐹 Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: 🚀 Install GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: '~> v2'
          install-only: true

      - name: ✅ Validate GoReleaser config
        run: goreleaser check

      - name: 🏗️ Test GoReleaser build (snapshot)
        run: goreleaser build --snapshot --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build cache for releases
  build-cache:
    name: 💾 Build Cache
    runs-on: ubuntu-latest
    environment: dev
    needs: [lint, build]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐹 Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: 🔧 Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🚀 Install GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: '~> v2'
          install-only: true

      - name: 🏗️ Build all targets
        run: task build:all

      - name: 🧪 Run comprehensive tests
        run: task test:all

      - name: 💾 Cache build artifacts
        uses: actions/cache@v4
        id: build-cache
        with:
          path: |
            ./dist
            ./go.mod
            ./go.sum
          key: ${{ github.sha }}-${{ hashFiles('**/go.sum') }}
